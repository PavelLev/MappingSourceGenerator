namespace MappingSourceGenerator.UnitTests;

public static class UsableMapMethodNamesTestData
{
    public static IEnumerable<object[]> Data
        => new[]
        {
            new object[]
            {
                "NestedPropertyWithUsableMapMethodNameTest",
                """
                #nullable enable
                using System;
                using System.Collections.Generic;
                using MappingSourceGenerator.Markers;

                namespace MappingSourceGenerator.UnitTests;

                public class UsableMapMethodNamesTests
                {
                    public record PersonWithCar1(
                        string Name,
                        Car1 Car);
                
                    public record Car1(
                        string Model);
                
                    public record PersonWithCar2(
                        string Name,
                        Car2 Car);
                
                    public record Car2(
                        string Model);
                }

                public static partial class UsableMapMethodNamesTestsMapper
                {
                    [GenerateMapping("Map1")]
                    public static partial UsableMapMethodNamesTests.PersonWithCar2 Map(this UsableMapMethodNamesTests.PersonWithCar1 personWithCar1);
                
                    public static UsableMapMethodNamesTests.Car2 Map1(
                        this UsableMapMethodNamesTests.Car1 car1)
                        => new(
                            car1.Model);
                }
                """,
                """
                // <auto-generated/>
                #pragma warning disable
                #nullable enable
                using System;
                using System.Linq;

                namespace MappingSourceGenerator.UnitTests;

                partial class UsableMapMethodNamesTestsMapper
                {
                    public static partial MappingSourceGenerator.UnitTests.UsableMapMethodNamesTests.PersonWithCar2 Map(
                        this MappingSourceGenerator.UnitTests.UsableMapMethodNamesTests.PersonWithCar1 personWithCar1)
                        => new(
                            personWithCar1.Name,
                            personWithCar1.Car.Map1());
                }
                """
            },
            new object[]
            {
                "NestedArrayWithWithUsableMapMethodNameItemMappingTest",
                """
                #nullable enable
                using System;
                using System.Collections.Generic;
                using MappingSourceGenerator.Markers;

                namespace MappingSourceGenerator.UnitTests;

                public class UsableMapMethodNamesTests
                {
                    public record PersonWithCarArray1(
                        string Name,
                        Car1[] Cars);
                
                    public record Car1(
                        string Model);
                
                    public record PersonWithCarArray2(
                        string Name,
                        Car2[] Cars);
                
                    public record Car2(
                        string Model);
                }

                public static partial class UsableMapMethodNamesTestsMapper
                {
                    [GenerateMapping("Map1")]
                    public static partial UsableMapMethodNamesTests.PersonWithCarArray2 Map(this UsableMapMethodNamesTests.PersonWithCarArray1 personWithCarArray1);
                
                    public static UsableMapMethodNamesTests.Car2 Map1(
                        this UsableMapMethodNamesTests.Car1 car1)
                        => new(
                            car1.Model);
                }
                """,
                """
                // <auto-generated/>
                #pragma warning disable
                #nullable enable
                using System;
                using System.Linq;

                namespace MappingSourceGenerator.UnitTests;

                partial class UsableMapMethodNamesTestsMapper
                {
                    public static partial MappingSourceGenerator.UnitTests.UsableMapMethodNamesTests.PersonWithCarArray2 Map(
                        this MappingSourceGenerator.UnitTests.UsableMapMethodNamesTests.PersonWithCarArray1 personWithCarArray1)
                        => new(
                            personWithCarArray1.Name,
                            personWithCarArray1.Cars.Select(Map1).ToArray());
                }
                """
            },
            new object[]
            {
                "NestedCollectionWithEnumPropertyUsableMapMethodNameTest",
                """
                #nullable enable
                using System;
                using System.Collections.Generic;
                using MappingSourceGenerator.Markers;

                namespace MappingSourceGenerator.UnitTests;

                public class UsableMapMethodNamesTests
                {
                    public record PersonWithCarWithType1(
                        string Name,
                        IReadOnlyCollection<CarWithType1> Cars);
                
                    public record CarWithType1(
                        string Model,
                        CarType1 Type);
                
                    public enum CarType1
                    {
                        Electric,
                        Petrol,
                    }
                
                    public record PersonWithCarWithType2(
                        string Name,
                        IReadOnlyCollection<CarWithType2> Cars);
                
                    public record CarWithType2(
                        string Model,
                        CarType2 Type);
                
                    public enum CarType2
                    {
                        Electric,
                        Petrol,
                    }
                }

                public static partial class UsableMapMethodNamesTestsMapper
                {
                    [GenerateMapping("Map1")]
                    public static partial UsableMapMethodNamesTests.PersonWithCarWithType2 Map(this UsableMapMethodNamesTests.PersonWithCarWithType1 personWithCarWithType1);
                
                    public static UsableMapMethodNamesTests.CarType2 Map1(
                        this UsableMapMethodNamesTests.CarType1 carType1)
                        => carType1 switch
                        {
                            UsableMapMethodNamesTests.CarType1.Electric => UsableMapMethodNamesTests.CarType2.Electric,
                            UsableMapMethodNamesTests.CarType1.Petrol => UsableMapMethodNamesTests.CarType2.Petrol,
                            _ => throw new InvalidOperationException($"Unable to map MappingSourceGenerator.UnitTests.UsableMapMethodNamesTests.CarType1.{carType1}"),
                        };
                }
                """,
                """
                // <auto-generated/>
                #pragma warning disable
                #nullable enable
                using System;
                using System.Linq;

                namespace MappingSourceGenerator.UnitTests;

                partial class UsableMapMethodNamesTestsMapper
                {
                    public static MappingSourceGenerator.UnitTests.UsableMapMethodNamesTests.CarWithType2 Map(
                        this MappingSourceGenerator.UnitTests.UsableMapMethodNamesTests.CarWithType1 carWithType1)
                        => new(
                            carWithType1.Model,
                            carWithType1.Type.Map1());
                
                    public static partial MappingSourceGenerator.UnitTests.UsableMapMethodNamesTests.PersonWithCarWithType2 Map(
                        this MappingSourceGenerator.UnitTests.UsableMapMethodNamesTests.PersonWithCarWithType1 personWithCarWithType1)
                        => new(
                            personWithCarWithType1.Name,
                            personWithCarWithType1.Cars.Select(Map).ToArray());
                }
                """
            }
        };
}