namespace MappingSourceGenerator.UnitTests;

public static class ManualMappingTestData
{
    public static IEnumerable<object[]> Data 
        => new[]
        {
            new object[]
            {
                "NestedPropertyWithManualMappingTest",
                """
                #nullable enable
                using System;
                using System.Collections.Generic;
                using MappingSourceGenerator.Markers;

                namespace MappingSourceGenerator.UnitTests;

                public class ManualMappingTests
                {
                    public record PersonWithCar1(
                        string Name,
                        Car1 Car);
                
                    public record Car1(
                        string Model);
                
                    public record PersonWithCar2(
                        string Name,
                        Car2 Car);
                
                    public record Car2(
                        string Model);
                }

                public static partial class ManualMappingTestsMapper
                {
                    [GenerateMapping]
                    public static partial ManualMappingTests.PersonWithCar2 Map(this ManualMappingTests.PersonWithCar1 personWithCar1);
                
                    public static ManualMappingTests.Car2 Map(
                        this ManualMappingTests.Car1 car1)
                        => new(
                            car1.Model);
                }
                """,
                """
                // <auto-generated/>
                #pragma warning disable
                #nullable enable
                using System;
                using System.Linq;

                namespace MappingSourceGenerator.UnitTests;

                partial class ManualMappingTestsMapper
                {
                    public static partial MappingSourceGenerator.UnitTests.ManualMappingTests.PersonWithCar2 Map(
                        this MappingSourceGenerator.UnitTests.ManualMappingTests.PersonWithCar1 personWithCar1)
                        => new(
                            personWithCar1.Name,
                            personWithCar1.Car.Map());
                }
                """
            },
            new object[]
            {
                "NestedArrayWithManualItemMappingTest",
                """
                #nullable enable
                using System;
                using System.Collections.Generic;
                using MappingSourceGenerator.Markers;

                namespace MappingSourceGenerator.UnitTests;

                public class ManualMappingTests
                {
                    public record PersonWithCarArray1(
                        string Name,
                        Car1[] Cars);
                
                    public record Car1(
                        string Model);
                
                    public record PersonWithCarArray2(
                        string Name,
                        Car2[] Cars);
                
                    public record Car2(
                        string Model);
                }

                public static partial class ManualMappingTestsMapper
                {
                    [GenerateMapping]
                    public static partial ManualMappingTests.PersonWithCarArray2 Map(this ManualMappingTests.PersonWithCarArray1 personWithCarArray1);
                
                    public static ManualMappingTests.Car2 Map(
                        this ManualMappingTests.Car1 car1)
                        => new(
                            car1.Model);
                }
                """,
                """
                // <auto-generated/>
                #pragma warning disable
                #nullable enable
                using System;
                using System.Linq;

                namespace MappingSourceGenerator.UnitTests;

                partial class ManualMappingTestsMapper
                {
                    public static partial MappingSourceGenerator.UnitTests.ManualMappingTests.PersonWithCarArray2 Map(
                        this MappingSourceGenerator.UnitTests.ManualMappingTests.PersonWithCarArray1 personWithCarArray1)
                        => new(
                            personWithCarArray1.Name,
                            personWithCarArray1.Cars.Select(Map).ToArray());
                }
                """
            },
            new object[]
            {
                "NestedListWithManualItemMappingTest",
                """
                #nullable enable
                using System;
                using System.Collections.Generic;
                using MappingSourceGenerator.Markers;

                namespace MappingSourceGenerator.UnitTests;

                public class ManualMappingTests
                {
                    public record PersonWithCarList1(
                        string Name,
                        List<Car1> Cars);
                
                    public record Car1(
                        string Model);
                
                    public record PersonWithCarList2(
                        string Name,
                        List<Car2> Cars);
                
                    public record Car2(
                        string Model);
                }

                public static partial class ManualMappingTestsMapper
                {
                    [GenerateMapping]
                    public static partial ManualMappingTests.PersonWithCarList2 Map(this ManualMappingTests.PersonWithCarList1 personWithCarList1);
                
                    public static ManualMappingTests.Car2 Map(
                        this ManualMappingTests.Car1 car1)
                        => new(
                            car1.Model);
                }
                """,
                """
                // <auto-generated/>
                #pragma warning disable
                #nullable enable
                using System;
                using System.Linq;

                namespace MappingSourceGenerator.UnitTests;

                partial class ManualMappingTestsMapper
                {
                    public static partial MappingSourceGenerator.UnitTests.ManualMappingTests.PersonWithCarList2 Map(
                        this MappingSourceGenerator.UnitTests.ManualMappingTests.PersonWithCarList1 personWithCarList1)
                        => new(
                            personWithCarList1.Name,
                            personWithCarList1.Cars.Select(Map).ToList());
                }
                """
            },
            new object[]
            {
                "NestedCollectionWithManualMappingTest",
                """
                #nullable enable
                using System;
                using System.Collections.Generic;
                using MappingSourceGenerator.Markers;

                namespace MappingSourceGenerator.UnitTests;

                public class ManualMappingTests
                {
                    public record PersonWithCarCollection1(
                        string Name,
                        IReadOnlyCollection<Car1> Cars);
                
                    public record Car1(
                        string Model);
                
                    public record PersonWithCarCollection2(
                        string Name,
                        IReadOnlyCollection<Car2> Cars);
                
                    public record Car2(
                        string Model);
                }

                public static partial class ManualMappingTestsMapper
                {
                    [GenerateMapping]
                    public static partial ManualMappingTests.PersonWithCarCollection2 Map(this ManualMappingTests.PersonWithCarCollection1 personWithCarCollection1);
                
                    public static IReadOnlyCollection<ManualMappingTests.Car2> Map(
                        this IReadOnlyCollection<ManualMappingTests.Car1> car1Collection)
                        => car1Collection.Select(_ => new ManualMappingTests.Car2(_.Model)).ToArray();
                }
                """,
                """
                // <auto-generated/>
                #pragma warning disable
                #nullable enable
                using System;
                using System.Linq;

                namespace MappingSourceGenerator.UnitTests;

                partial class ManualMappingTestsMapper
                {
                    public static partial MappingSourceGenerator.UnitTests.ManualMappingTests.PersonWithCarCollection2 Map(
                        this MappingSourceGenerator.UnitTests.ManualMappingTests.PersonWithCarCollection1 personWithCarCollection1)
                        => new(
                            personWithCarCollection1.Name,
                            personWithCarCollection1.Cars.Map());
                }
                """
            },
            new object[]
            {
                "NestedArrayWithManualMappingTest",
                """
                #nullable enable
                using System;
                using System.Collections.Generic;
                using MappingSourceGenerator.Markers;

                namespace MappingSourceGenerator.UnitTests;

                public class ManualMappingTests
                {
                    public record PersonWithManualCarArray1(
                        string Name,
                        ManualCar1[] Cars);
                
                    public record ManualCar1(
                        string Model);
                
                    public record PersonWithManualCarArray2(
                        string Name,
                        ManualCar2[] Cars);
                
                    public record ManualCar2(
                        string Model);
                }

                public static partial class ManualMappingTestsMapper
                {
                    [GenerateMapping]
                    public static partial ManualMappingTests.PersonWithManualCarArray2 Map(this ManualMappingTests.PersonWithManualCarArray1 personWithManualCarArray1);
                
                    public static ManualMappingTests.ManualCar2[] Map(
                        this ManualMappingTests.ManualCar1[] manualCar1Array)
                        => manualCar1Array.Select(_ => new ManualMappingTests.ManualCar2(_.Model)).ToArray();
                }
                """,
                """
                // <auto-generated/>
                #pragma warning disable
                #nullable enable
                using System;
                using System.Linq;

                namespace MappingSourceGenerator.UnitTests;

                partial class ManualMappingTestsMapper
                {
                    public static partial MappingSourceGenerator.UnitTests.ManualMappingTests.PersonWithManualCarArray2 Map(
                        this MappingSourceGenerator.UnitTests.ManualMappingTests.PersonWithManualCarArray1 personWithManualCarArray1)
                        => new(
                            personWithManualCarArray1.Name,
                            personWithManualCarArray1.Cars.Map());
                }
                """
            },
            new object[]
            {
                "NestedCollectionWithEnumPropertyTest",
                """
                #nullable enable
                using System;
                using System.Collections.Generic;
                using MappingSourceGenerator.Markers;

                namespace MappingSourceGenerator.UnitTests;

                public class ManualMappingTests
                {
                    public record PersonWithCarWithType1(
                        string Name,
                        IReadOnlyCollection<CarWithType1> Cars);
                
                    public record CarWithType1(
                        string Model,
                        CarType1 Type);
                
                    public enum CarType1
                    {
                        Electric,
                        Petrol,
                    }
                
                    public record PersonWithCarWithType2(
                        string Name,
                        IReadOnlyCollection<CarWithType2> Cars);
                
                    public record CarWithType2(
                        string Model,
                        CarType2 Type);
                
                    public enum CarType2
                    {
                        Electric,
                        Petrol,
                    }
                }

                public static partial class ManualMappingTestsMapper
                {
                    [GenerateMapping]
                    public static partial ManualMappingTests.PersonWithCarWithType2 Map(this ManualMappingTests.PersonWithCarWithType1 personWithCarWithType1);
                
                    public static ManualMappingTests.CarType2 Map(
                        this ManualMappingTests.CarType1 carType1)
                        => carType1 switch
                        {
                            ManualMappingTests.CarType1.Electric => ManualMappingTests.CarType2.Electric,
                            ManualMappingTests.CarType1.Petrol => ManualMappingTests.CarType2.Petrol,
                            _ => throw new InvalidOperationException($"Unable to map MappingSourceGenerator.UnitTests.ManualMappingTests.CarType1.{carType1}"),
                        };
                }
                """,
                """
                // <auto-generated/>
                #pragma warning disable
                #nullable enable
                using System;
                using System.Linq;

                namespace MappingSourceGenerator.UnitTests;

                partial class ManualMappingTestsMapper
                {
                    public static MappingSourceGenerator.UnitTests.ManualMappingTests.CarWithType2 Map(
                        this MappingSourceGenerator.UnitTests.ManualMappingTests.CarWithType1 carWithType1)
                        => new(
                            carWithType1.Model,
                            carWithType1.Type.Map());
                
                    public static partial MappingSourceGenerator.UnitTests.ManualMappingTests.PersonWithCarWithType2 Map(
                        this MappingSourceGenerator.UnitTests.ManualMappingTests.PersonWithCarWithType1 personWithCarWithType1)
                        => new(
                            personWithCarWithType1.Name,
                            personWithCarWithType1.Cars.Select(Map).ToArray());
                }
                """
            },
        };
}