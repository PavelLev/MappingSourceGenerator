namespace MappingSourceGenerator.UnitTests;

public static class ManualMappingTestData
{
    public static IEnumerable<object[]> Data 
        => new[]
        {
            new object[]
            {
                "NestedCollectionWithEnumPropertyTest",
                """
                #nullable enable
                using System;
                using System.Collections.Generic;
                using MappingSourceGenerator.Markers;

                namespace MappingSourceGenerator.UnitTests;

                public class ManualMappingTests
                {
                    public record PersonWithCarWithType1(
                        string Name,
                        IReadOnlyCollection<CarWithType1> Cars);
                
                    public record CarWithType1(
                        string Model,
                        CarType1 Type);
                
                    public enum CarType1
                    {
                        Electric,
                        Petrol,
                    }
                
                    public record PersonWithCarWithType2(
                        string Name,
                        IReadOnlyCollection<CarWithType2> Cars);
                
                    public record CarWithType2(
                        string Model,
                        CarType2 Type);
                
                    public enum CarType2
                    {
                        Electric,
                        Petrol,
                    }
                }

                public static partial class ManualMappingTestsMapper
                {
                    [GenerateMapping]
                    public static partial ManualMappingTests.PersonWithCarWithType2 Map(this ManualMappingTests.PersonWithCarWithType1 personWithCarWithType1);
                
                    public static ManualMappingTests.CarType2 Map(
                        this ManualMappingTests.CarType1 carType1)
                        => carType1 switch
                        {
                            ManualMappingTests.CarType1.Electric => ManualMappingTests.CarType2.Electric,
                            ManualMappingTests.CarType1.Petrol => ManualMappingTests.CarType2.Petrol,
                            _ => throw new InvalidOperationException($"Unable to map MappingSourceGenerator.UnitTests.ManualMappingTests.CarType1.{carType1}"),
                        };
                }
                """,
                """
                // <auto-generated/>
                #pragma warning disable
                #nullable enable
                using System;
                using System.Linq;

                namespace MappingSourceGenerator.UnitTests;

                partial class ManualMappingTestsMapper
                {
                    public static MappingSourceGenerator.UnitTests.ManualMappingTests.CarWithType2 Map(
                        this MappingSourceGenerator.UnitTests.ManualMappingTests.CarWithType1 carWithType1)
                        => new(
                            carWithType1.Model,
                            carWithType1.Type.Map());
                
                    public static partial MappingSourceGenerator.UnitTests.ManualMappingTests.PersonWithCarWithType2 Map(
                        this MappingSourceGenerator.UnitTests.ManualMappingTests.PersonWithCarWithType1 personWithCarWithType1)
                        => new(
                            personWithCarWithType1.Name,
                            personWithCarWithType1.Cars.Select(Map).ToArray());
                }
                """
            },
            new object[]
            {
                "NestedArrayWithManualItemMappingTest",
                """
                #nullable enable
                using System;
                using System.Collections.Generic;
                using MappingSourceGenerator.Markers;

                namespace MappingSourceGenerator.UnitTests;

                public class ManualMappingTests
                {
                    public record PersonWithCars1(
                        string Name,
                        IReadOnlyCollection<Car1> Cars);
                
                    public record Car1(
                        string Model);
                
                    public record PersonWithCars2(
                        string Name,
                        IReadOnlyCollection<Car2> Cars);
                
                    public record Car2(
                        string Model;
                }

                public static partial class ManualMappingTestsMapper
                {
                    [GenerateMapping]
                    public static partial ManualMappingTests.PersonWithCars2 Map(this ManualMappingTests.PersonWithCars1 personWithCars1);
                
                    public static ManualMappingTests.Car2 Map(
                        this ManualMappingTests.Car1 car1)
                        => new(
                            car1.Model);
                }
                """,
                """
                // <auto-generated/>
                #pragma warning disable
                #nullable enable
                using System;
                using System.Linq;

                namespace MappingSourceGenerator.UnitTests;

                partial class ManualMappingTestsMapper
                {
                    public static partial MappingSourceGenerator.UnitTests.ManualMappingTests.PersonWithCars2 Map(
                        this MappingSourceGenerator.UnitTests.ManualMappingTests.PersonWithCars1 personWithCars1)
                        => new(
                            personWithCars1.Name,
                            personWithCars1.Cars.Select(Map).ToArray());
                }
                """
            },
            new object[]
            {
                "NestedCollectionWithManualMappingTest",
                """
                #nullable enable
                using System;
                using System.Collections.Generic;
                using MappingSourceGenerator.Markers;

                namespace MappingSourceGenerator.UnitTests;

                public class ManualMappingTests
                {
                    public record PersonWithCarCollection1(
                        string Name,
                        IReadOnlyCollection<Car1> Cars);
                
                    public record Car1(
                        string Model);
                
                    public record PersonWithCarCollection2(
                        string Name,
                        IReadOnlyCollection<Car2> Cars);
                
                    public record Car2(
                        string Model);
                }

                public static partial class ManualMappingTestsMapper
                {
                    [GenerateMapping]
                    public static partial ManualMappingTests.PersonWithCarCollection2 Map(this ManualMappingTests.PersonWithCarCollection1 personWithCarCollection1);
                
                    public static IReadOnlyCollection<ManualMappingTests.Car2> Map(
                        this IReadOnlyCollection<ManualMappingTests.Car1> car1Collection)
                        => car1Collection.Select(_ => new ManualMappingTests.Car2(_.Model)).ToArray();
                }
                """,
                """
                // <auto-generated/>
                #pragma warning disable
                #nullable enable
                using System;
                using System.Linq;

                namespace MappingSourceGenerator.UnitTests;

                partial class ManualMappingTestsMapper
                {
                    public static partial MappingSourceGenerator.UnitTests.ManualMappingTests.PersonWithCarCollection2 Map(
                        this MappingSourceGenerator.UnitTests.ManualMappingTests.PersonWithCarCollection1 personWithCarCollection1)
                        => new(
                            personWithCarCollection1.Name,
                            personWithCarCollection1.Cars.Map());
                }
                """
            },
            new object[]
            {
                "NestedArrayWithManualMappingTest",
                """
                #nullable enable
                using System;
                using System.Collections.Generic;
                using MappingSourceGenerator.Markers;

                namespace MappingSourceGenerator.UnitTests;

                public class ManualMappingTests
                {
                    public record PersonWithCarArray1(
                        string Name,
                        Car1[] Cars);
                
                    public record Car1(
                        string Model);
                
                    public record PersonWithCarArray2(
                        string Name,
                        Car2[] Cars);
                
                    public record Car2(
                        string Model;
                }

                public static partial class ManualMappingTestsMapper
                {
                    [GenerateMapping]
                    public static partial ManualMappingTests.PersonWithCarArray2 Map(this ManualMappingTests.PersonWithCarArray1 personWithCarArray1);
                
                    public static ManualMappingTests.Car2[] Map(
                        this ManualMappingTests.Car1[] car1Array)
                        => car1Array.Select(_ => new ManualMappingTests.Car2(_.Model)).ToArray();
                }
                """,
                """
                // <auto-generated/>
                #pragma warning disable
                #nullable enable
                using System;
                using System.Linq;

                namespace MappingSourceGenerator.UnitTests;

                partial class ManualMappingTestsMapper
                {
                    public static partial MappingSourceGenerator.UnitTests.ManualMappingTests.PersonWithCarArray2 Map(
                        this MappingSourceGenerator.UnitTests.ManualMappingTests.PersonWithCarArray1 personWithCarArray1)
                        => new(
                            personWithCarArray1.Name,
                            personWithCarArray1.Cars.Map());
                }
                """
            }
        };
}